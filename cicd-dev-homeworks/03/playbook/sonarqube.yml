---
- name: Prepare Sonar host
  hosts: sonarqube
  become: true
  tasks:
    - name: Create group in system
      group:
        name: "{{ sonarqube_db_user }}"
        state: present

    - name: Create user in system
      user:
        name: "{{ sonarqube_db_user }}"
        group: "{{ sonarqube_db_user }}"

    - name: "Set up ssh key to access for managed node"
      authorized_key:
        user: "{{ sonarqube_db_user }}"
        state: present
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

    - name: "Allow group to have passwordless sudo"
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%{{ sonarqube_db_user }}'
        line: '%{{ sonarqube_db_user }} ALL=(ALL) NOPASSWD: ALL'
        validate: 'visudo -cf %s'

    - name: Increase Virtual Memory
      lineinfile:
        dest: /etc/sysctl.conf
        state: present
        regexp: '^vm.max_map_count'
        line: 'vm.max_map_count=262144'
    - name: Reboot VM
      reboot:

- name: Get Sonarqube installed
  hosts: sonarqube
  vars: 
    ansible_user: "{{ sonarqube_db_user }}"
  tasks:
    - name: Get distrib ZIP
      get_url:
        url: "{{ sonar_download_url }}"
        dest: "/tmp/{{ sonar_version_directory }}.zip"
        validate_certs: false

    - name: Unzip Sonar
      become: true
      unarchive:
        src: "/tmp/{{ sonar_version_directory }}.zip"
        dest: /usr/local/
        copy: false
        owner: "{{ sonarqube_db_user }}"
        group: "{{ sonarqube_db_user }}"
        creates: /usr/local/sonar/COPYING

    - name: Move Sonar into place.
      become: true
      copy:
        src: /usr/local/{{ sonar_version_directory }}/
        dest: /usr/local/sonar/
        owner: "{{ sonarqube_db_user }}"
        group: "{{ sonarqube_db_user }}"
        remote_src: true

    - name: Configure SonarQube JDBC settings for PostgreSQL.
      lineinfile:
        dest: /usr/local/sonar/conf/sonar.properties
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
      with_items:
        - regexp: "^sonar.jdbc.username"
          line: "sonar.jdbc.username={{ sonarqube_db_user }}"
        - regexp: "^sonar.jdbc.password"
          line: "sonar.jdbc.password={{ sonarqube_db_password }}"
        - regexp: "^sonar.jdbc.url"
          line: "sonar.jdbc.url=jdbc:postgresql://localhost:{{ sonar_db_port }}/{{ sonarqube_db_name }}?useUnicode=true&characterEncoding=utf8&rewriteBatchedStatements=true&useConfigs=maxPerformance"
        - regexp: "^sonar.web.context"
          line: "sonar.web.context={{ sonar_web_context }}"
    
    - name: Generate wrapper.conf
      template:
        src: wrapper.conf.j2
        dest: /usr/local/sonar/conf/wrapper.conf
        mode: 0644

    - name: Symlink sonar bin.
      become: true
      file:
        src: /usr/local/sonar/bin/linux-x86-64/sonar.sh
        dest: /usr/bin/sonar
        state: link
      register: sonar_symlink

    - name: Copy SonarQube systemd unit file into place (for systemd systems).
      become: true
      template:
        src: sonar.unit.j2
        dest: /etc/systemd/system/sonar.service
        owner: root
        group: root
        mode: 0755

    - name: Ensure Sonar is running and set to start on boot.
      become: true
      service:
        name: sonar
        state: restarted
        enabled: true

    - name: Allow Sonar time to build on first start.
      pause:
        seconds: 180
      when: sonar_symlink.changed
      tags: ['skip_ansible_lint']

    - name: Make sure Sonar is responding on the configured port.
      wait_for:
        port: 9000
        delay: 3
        timeout: 300
